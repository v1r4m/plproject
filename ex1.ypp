/********************************************************
 * 
 ********************************************************/
%{
#include <iostream>
#include <string>
#include <map>
#include <cstdlib> //-- I need this for atoi
using namespace std;

int vbltable[26];
string functable[26];
//-- Lexer prototype required by bison, aka getNextToken()
int yylex(); 
int yyerror(const char *p) { 
  cerr << "Parse error!" << endl;
  return 0;}

%}

//-- SYMBOL SEMANTIC VALUES -----------------------------
//-- In bison, every symbol, whether it be token or non-terminal
//-- can have a "semantic value".  A NUM token "4.35", has
//-- semantic value 4.35.  A "term" symbol representing 
//-- "-3.5*2*5" has semantic value 35.0, which you get by
//-- evaluating -3.5*2*5.  An OPA symbol's semantic value
//-- is '+' or '-' depending on which symbol we actually read.
//-- Some tokens, like STOP or RP don't need a semantic value.
//-- The %union statement lists the type-and-name for each
//-- semantic value.  The %token and %type statements let you
//-- you specify semantic value types for tokens and 
//-- non-terminals.
%union {
  int val; 
  char sym;
};
%token <val> NUM CHAR
%token <sym> LP RP STOP INT EQ PRINT
%type  <val> program id declaration subprog_declaration subprog_declarations compound_stt type identifier_list type standard_type subprog_head compound_stt
arguments parameter_list actual_parameter_exp statement_list statement variable exp printstt procedure_stt compound_stt if_stt while_stt fpr_stt procedure_stt 
exp simple_exp term factor sign multop addop relop

//-- GRAMMAR RULES ---------------------------------------
%%
program: "mainprog" id STOP declaration subprog_declarations compound_stt

declaration: type identifier_list STOP

/*?*/

type: standard_type
| standard_type CHAR "[" NUM "]"        { vbltable[$2] = $3;}      

standard_type: "int"

subprog_declarations: subprog_declaration subprog_declarations
| ""

subprog_declaration: "function" id ":" standard_type STOP subprog_body   {functable[$2] = subporg_body;}

subprog_body: declaration compound_stt

compound_stt: "begin\n" statement_list "end\n"

statement_list: statement
| statement STOP statement_list

statement: variable EQ exp
| printstt
| procedure_stt
| ficompound_stt
| if_stt
| while_stt
| for_stt
| "return" exp
| "nop"

if_stt: "if" exp ":" statement ("elif" exp ":" statement)* ["else" ":" exp]

while_stt: "while" exp ":" statement ["else" ":" statement]

for_stt: "for" exp "in" exp ":" statement ["else" ":" statement]

printstt: "print" "print" LP exp RP

variable: id
| id "[" exp "]"

procedure_stt: id LP actual_parameter_exp RP

actual_parameter_exp: expression_list
|""

expression_list: exp | exp "," expression_list

exp: simple_exp
| simpe_exp relop simple_exp 

simple_exp : term
| term addop simple_exp

term: factor
| factor multop term

factor: variable
| procedure_stt
| "!" factor
| sign

sign: "+" | "-"
relop: ">" | ">=" | "=<" | "<=" | "==" | "!=" | "in"
addop: "+" | "-"
multop: "*" | "/"

%%
//-- FUNCTION DEFINITIONS ---------------------------------
int main()
{
  yyparse();
  return 0;
}
